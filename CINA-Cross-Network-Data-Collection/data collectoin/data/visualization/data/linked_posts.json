[
    {
        "Id": "1666",
        "PostTypeId": "2",
        "ParentId": "1607",
        "CreationDate": "2008-08-04T22:45:11.443",
        "Score": "57",
        "Body": "<p>In the Rails world, there's the concept of migrations, scripts in which changes to the database are made in Ruby rather than a database-specific flavour of SQL. Your Ruby migration code ends up being converted into the DDL specific to your current database; this makes switching database platforms very easy. </p>\n\n<p>For every change you make to the database, you write a new migration. Migrations typically have two methods: an \"up\" method in which the changes are applied and a \"down\" method in which the changes are undone. A single command brings the database up to date, and can also be used to bring the database to a specific version of the schema. In Rails, migrations are kept in their own directory in the project directory and get checked into version control just like any other project code.</p>\n\n<p><a href=\"http://www.oracle.com/technology/pub/articles/kern-rails-migrations.html\" rel=\"noreferrer\" title=\"Oracle guide to Ruby on Rails migrations\">This Oracle guide to Rails migrations</a> covers migrations quite well.</p>\n\n<p>Developers using other languages have looked at migrations and have implemented their own language-specific versions. I know of <strong><a href=\"https://github.com/ruckus/ruckusing-migrations\" rel=\"noreferrer\" title=\"Ruckusing\">Ruckusing</a></strong>, a PHP migrations system that is modelled after Rails' migrations; it might be what you're looking for.</p>\n",
        "OwnerUserId": "216",
        "LastEditorUserId": "6191314",
        "LastEditDate": "2016-05-02T09:04:43.610",
        "LastActivityDate": "2016-05-02T09:04:43.610",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "2245",
        "PostTypeId": "2",
        "ParentId": "2158",
        "CreationDate": "2008-08-05T13:03:43.707",
        "Score": "98",
        "Body": "<p>When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one <code>JPanel</code>.  The benefit of extending <code>Swing</code> components, of course, is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a <code>paint()</code> method print a pretty picture.  It may not be done the best way however, but it may be a good starting point for you.</p>\n\n<p>Edit 8/6 - If it wasn't apparent from the images, each Die is a button you can click. This will move it to the <code>DiceContainer</code> below.  Looking at the source code you can see that each Die button is drawn dynamically, based on its value.</p>\n\n<p><img src=\"https://i.stack.imgur.com/pgyQp.jpg\" alt=\"alt text\"><br>\n<img src=\"https://i.stack.imgur.com/jkYRd.jpg\" alt=\"alt text\"><br>\n<img src=\"https://i.stack.imgur.com/9BI34.jpg\" alt=\"alt text\"></p>\n\n<p>Here are the basic steps:</p>\n\n<ol>\n<li>Create a class that extends <code>JComponent</code></li>\n<li>Call parent constructor <code>super()</code> in your constructors</li>\n<li>Make sure you class implements <code>MouseListener</code></li>\n<li><p>Put this in the constructor:</p>\n\n<pre><code>enableInputMethods(true);   \naddMouseListener(this);\n</code></pre></li>\n<li><p>Override these methods:</p>\n\n<pre><code>public Dimension getPreferredSize()  \npublic Dimension getMinimumSize()  \npublic Dimension getMaximumSize()\n</code></pre></li>\n<li><p>Override this method:</p>\n\n<pre><code>public void paintComponent(Graphics g)\n</code></pre></li>\n</ol>\n\n<p>The amount of space you have to work with when drawing your button is defined by <code>getPreferredSize()</code>, assuming <code>getMinimumSize()</code> and <code>getMaximumSize()</code> return the same value.  I haven't experimented too much with this but, depending on the layout you use for your GUI your button could look completely different.</p>\n\n<p>And finally, the <a href=\"https://github.com/kdeloach/labs/blob/master/java/yahtzee/src/Dice.java\" rel=\"noreferrer\">source code</a>.  In case I missed anything.  </p>\n",
        "OwnerUserId": "40",
        "LastEditorUserId": "1672920",
        "LastEditorDisplayName": "kevin d",
        "LastEditDate": "2016-10-27T07:19:59.620",
        "LastActivityDate": "2016-10-27T07:19:59.620",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "3162",
        "PostTypeId": "2",
        "ParentId": "3150",
        "CreationDate": "2008-08-06T08:28:14.620",
        "Score": "2",
        "Body": "<p>I use <a href=\"https://github.com/unittest-cpp\" rel=\"nofollow noreferrer\">UnitTest++</a>.</p>\n\n<p>In the years since I made this post the source has moved from SourceForge to github.  Also the <a href=\"https://github.com/unittest-cpp/unittest-cpp/wiki/Writing-More-Tests-With-the-Bowling-Game-Kata\" rel=\"nofollow noreferrer\">example tutorial</a> is now more agnostic - doesn't go into any configuration or project set up at all.</p>\n\n<p>I doubt it will still work for Visual Studio 6 as the project files are now created via CMake. If you still need the older version support you can get the last available version under the <a href=\"https://github.com/unittest-cpp/unittest-cpp/tree/sourceforge\" rel=\"nofollow noreferrer\">SourceForge</a> branch.</p>\n",
        "OwnerUserId": "342",
        "LastEditorUserId": "342",
        "LastEditDate": "2016-08-05T06:18:37.250",
        "LastActivityDate": "2016-08-05T06:18:37.250",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "7500",
        "PostTypeId": "2",
        "ParentId": "7440",
        "CreationDate": "2008-08-11T03:43:10.863",
        "Score": "4",
        "Body": "<p>We have been using <a href=\"https://github.com/pivotal/jsunit\" rel=\"nofollow noreferrer\">JSunit</a> for a while to do unit tests... it may not be the same kinds of tests you are talking about, but it is great for ensuring your JavaScript works as you expect.</p>\n\n<p>You run it in the browser, and it can be set in an Ant build to be automatically run against a bunch of browsers on a bunch of platforms remotely (so you can ensure your code is cross-browser as well as ensure the logic is correct).</p>\n\n<p>I don't think it replaces Selenium, but it complements it well.</p>\n",
        "OwnerUserId": "122",
        "LastEditorUserId": "938089",
        "LastEditDate": "2013-06-08T13:50:40.627",
        "LastActivityDate": "2013-06-08T13:50:40.627",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "7661",
        "PostTypeId": "1",
        "AcceptedAnswerId": "32551",
        "CreationDate": "2008-08-11T10:23:48.763",
        "Score": "10",
        "ViewCount": "23036",
        "Body": "<p>Searching for some sample code for converting a point in WGS84 coordinate system to a map position in Google Maps (pixel position), also supporting zoom levels. </p>\n\n<p>If the codes is well commented, then it can also be in some other language.</p>\n\n<p>You can also point me to a open source Java project :)</p>\n\n<p>Some resources found:</p>\n\n<p><a href=\"http://trac.openlayers.org/browser/trunk/openlayers/lib/OpenLayers/Layer\" rel=\"nofollow noreferrer\">OpenLayer</a> implementation. </p>\n\n<p><a href=\"http://josm.openstreetmap.de/browser/trunk/src/org/openstreetmap/josm/data/projection\" rel=\"nofollow noreferrer\">JOSM</a> project</p>\n\n<p>Excellent <a href=\"https://github.com/OSUCartography/JMapProjLib\" rel=\"nofollow noreferrer\">Java Map Projection Library </a> from JH LABS. This is a pure java PROJ.4 port. Does projection from WGS84 to meters. From there it's quite straightforward to convert meters to tile pixels.</p>\n",
        "OwnerUserId": "706",
        "LastEditorUserId": "706",
        "LastEditorDisplayName": "JaanusSiim",
        "LastEditDate": "2016-06-13T10:14:14.240",
        "LastActivityDate": "2020-06-23T07:38:34.270",
        "Title": "Java code for WGS84 to Google map position and back",
        "Tags": "<java><google-maps><mapping><wgs84>",
        "AnswerCount": "6",
        "CommentCount": "0",
        "FavoriteCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "7724",
        "PostTypeId": "2",
        "ParentId": "7662",
        "CreationDate": "2008-08-11T12:39:37.817",
        "Score": "375",
        "Body": "<p>I recommend checking out Microsoft's SQL Server sample databases:\n<a href=\"https://github.com/Microsoft/sql-server-samples/releases/tag/adventureworks\" rel=\"noreferrer\">https://github.com/Microsoft/sql-server-samples/releases/tag/adventureworks</a></p>\n\n<p>The AdventureWorks sample uses a very clear and consistent naming convention that uses schema names for the organization of database objects.</p>\n\n<ol>\n<li>Singular names for tables</li>\n<li>Singular names for columns</li>\n<li>Schema name for tables prefix (E.g.: SchemeName.TableName)</li>\n<li>Pascal casing (a.k.a. upper camel case)</li>\n</ol>\n",
        "OwnerUserId": "373",
        "LastEditorUserId": "2306988",
        "LastEditDate": "2018-04-02T20:05:38.510",
        "LastActivityDate": "2018-04-02T20:05:38.510",
        "CommentCount": "17",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "8130",
        "PostTypeId": "2",
        "ParentId": "8128",
        "CreationDate": "2008-08-11T19:43:31.003",
        "Score": "43",
        "Body": "<p>This guy seems to have your answer.</p>\n\n<blockquote>\n  <p><a href=\"https://damieng.com/blog/2006/08/08/calculating_crc32_in_c_and_net\" rel=\"noreferrer\">https://damieng.com/blog/2006/08/08/calculating_crc32_in_c_and_net</a></p>\n</blockquote>\n\n<p>And in case the blog ever goes away or breaks the url, here's the github link:</p>\n\n<blockquote>\n  <p><a href=\"https://github.com/damieng/DamienGKit/blob/master/CSharp/DamienG.Library/Security/Cryptography/Crc32.cs\" rel=\"noreferrer\">https://github.com/damieng/DamienGKit/blob/master/CSharp/DamienG.Library/Security/Cryptography/Crc32.cs</a></p>\n</blockquote>\n\n<hr>\n\n<p>Usage of the Crc32 class from the blog post:</p>\n\n<pre><code>Crc32 crc32 = new Crc32();\nString hash = String.Empty;\n\nusing (FileStream fs = File.Open(\"c:\\\\myfile.txt\", FileMode.Open))\n  foreach (byte b in crc32.ComputeHash(fs)) hash += b.ToString(\"x2\").ToLower();\n\nConsole.WriteLine(\"CRC-32 is {0}\", hash);\n</code></pre>\n",
        "OwnerUserId": "76",
        "LastEditorUserId": "5720",
        "LastEditDate": "2018-07-06T17:42:02.980",
        "LastActivityDate": "2018-07-06T17:42:02.980",
        "CommentCount": "3",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "10343",
        "PostTypeId": "2",
        "ParentId": "6371",
        "CreationDate": "2008-08-13T20:36:45.670",
        "Score": "1",
        "Body": "<p>If you are in the .NET environment then the solution is <a href=\"http://web.archive.org/web/20150814180919/https://github.com/HeadspringLabs/Tarantino\" rel=\"nofollow noreferrer\">Tarantino (archived)</a>.  It handles all of this (including which sql scripts to install) in a NANT build.</p>\n",
        "OwnerUserId": "1208",
        "OwnerDisplayName": "Jim Greco",
        "LastEditorUserId": "73603",
        "LastEditDate": "2020-06-25T08:29:24.153",
        "LastActivityDate": "2020-06-25T08:29:24.153",
        "CommentCount": "1",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "10659",
        "PostTypeId": "2",
        "ParentId": "10658",
        "CreationDate": "2008-08-14T04:09:48.813",
        "Score": "73",
        "Body": "<p>I use <a href=\"http://sourceforge.net/projects/dday-ical/\" rel=\"noreferrer\">DDay.Ical</a>, its good stuff.\nHas the ability to open up an ical file and get its data in a nice object model. It says beta, but it works great for us.</p>\n\n<h1>Edit Nov 2016</h1>\n\n<p>This library has been deprecated, but was picked up and re-released as iCal.NET by another dev. </p>\n\n<p>Notes about the release: <a href=\"http://rianjs.net/2016/07/dday-ical-is-now-ical-net\" rel=\"noreferrer\">rianjs.net/2016/07/dday-ical-is-now-ical-net</a></p>\n\n<p>Source on GitHub: <a href=\"https://github.com/rianjs/ical.net\" rel=\"noreferrer\">github.com/rianjs/ical.net</a></p>\n",
        "OwnerUserId": "1220",
        "OwnerDisplayName": "ChanChan",
        "LastEditorUserId": "97964",
        "LastEditDate": "2016-11-01T20:28:02.957",
        "LastActivityDate": "2016-11-01T20:28:02.957",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "10845",
        "PostTypeId": "2",
        "ParentId": "8948",
        "CreationDate": "2008-08-14T09:46:21.270",
        "Score": "38",
        "Body": "<p>I've used <a href=\"https://github.com/quodlibet/mutagen\" rel=\"noreferrer\">mutagen</a> to edit tags in media files before.  The nice thing about mutagen is that it can handle other formats, such as mp4, FLAC etc.  I've written several scripts with a lot of success using this API.</p>\n",
        "OwnerUserId": "912",
        "OwnerDisplayName": "JKP",
        "LastEditorUserId": "9481500",
        "LastEditorDisplayName": "jwfearn",
        "LastEditDate": "2018-04-03T11:40:19.223",
        "LastActivityDate": "2018-04-03T11:40:19.223",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "12120",
        "PostTypeId": "2",
        "ParentId": "11145",
        "CreationDate": "2008-08-15T10:07:39.113",
        "Score": "2",
        "Body": "<p>The simple answer is that (at time of writing) what you want almost certainly didn't exist. Sorry!</p>\n\n<p>If you're Windows-based then I'd look for a product in the .NET space, where I expect you'd find something. You're probably going to have to pay real money though. I suppose, if you're brave, you may be able to talk to it using IronRuby.</p>\n\n<p>From a non-MS environment I would be hoping for a Java-based solution. As already mentioned, within the Web world, you're going to be hoping some something JavaScript-based, or probably more likely, something from the Flash (or maybe even Silverlight?) world.</p>\n\n<p>Actually, if you want to stay in Ruby and don't mind some risk, Silverlight might be a way to go - assuming the DLR stuff actually works (no experience here). Ruby - much as I love it - hardly has the most mature GUI structure around it.</p>\n\n<p>Update: Since writing this (approaching 5 years ago) the situation has improved - a little. While I'm still not aware of any specific Ruby graph-drawing libraries, there is improved support for <a href=\"http://www.graphviz.org/\" rel=\"nofollow noreferrer\">Graphviz</a> <a href=\"https://github.com/glejeune/Ruby-Graphviz/\" rel=\"nofollow noreferrer\">here (Github</a>) or by <code>gem install ruby-graphviz</code>. I've found that for simple graphs, it's quite possible to write the script directly from Ruby.</p>\n",
        "OwnerUserId": "1060",
        "OwnerDisplayName": "Mike Woodhouse",
        "LastEditorUserId": "128421",
        "LastEditDate": "2014-12-04T05:43:41.117",
        "LastActivityDate": "2014-12-04T05:43:41.117",
        "CommentCount": "3",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "12540",
        "PostTypeId": "2",
        "ParentId": "12523",
        "CreationDate": "2008-08-15T17:50:31.730",
        "Score": "7",
        "Body": "<p>Check out <a href=\"https://github.com/TestStack/White\" rel=\"nofollow noreferrer\">https://github.com/TestStack/White</a> and <a href=\"http://nunitforms.sourceforge.net/\" rel=\"nofollow noreferrer\">http://nunitforms.sourceforge.net/</a>. We've used the White project with success.</p>\n",
        "OwnerUserId": "748",
        "OwnerDisplayName": "dp",
        "LastEditorUserId": "13531",
        "LastEditDate": "2018-01-22T19:33:11.397",
        "LastActivityDate": "2018-01-22T19:33:11.397",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "12585",
        "PostTypeId": "2",
        "ParentId": "4430",
        "CreationDate": "2008-08-15T18:36:14.227",
        "Score": "21",
        "Body": "<p>I've had great success with <a href=\"https://github.com/jbarciauskas/wsdl2php\" rel=\"noreferrer\">wsdl2php</a>.  It will automatically create wrapper classes for all objects and methods used in your web service.</p>\n",
        "OwnerUserId": "72",
        "OwnerDisplayName": "pix0r",
        "LastEditorUserId": "72",
        "LastEditDate": "2014-10-23T19:04:18.513",
        "LastActivityDate": "2014-10-23T19:04:18.513",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "12844",
        "PostTypeId": "2",
        "ParentId": "7034",
        "CreationDate": "2008-08-15T22:31:06.360",
        "Score": "35",
        "Body": "<p><a href=\"http://www.jsviz.org\" rel=\"nofollow noreferrer\">JsVIS</a> was pretty nice, but slow with larger graphs, and has been abandoned since 2007.</p>\n\n<p><a href=\"https://github.com/prefuse/Prefuse\" rel=\"nofollow noreferrer\">prefuse</a> is a set of software tools for creating rich interactive data visualizations in Java. <a href=\"https://github.com/prefuse/Flare\" rel=\"nofollow noreferrer\">flare</a>  is an ActionScript library for creating visualizations that run in the Adobe Flash Player, abandoned since 2012.</p>\n",
        "OwnerUserId": "804",
        "OwnerDisplayName": "Sam",
        "LastEditorUserId": "1269037",
        "LastEditDate": "2014-11-13T09:47:19.670",
        "LastActivityDate": "2014-11-13T09:47:19.670",
        "CommentCount": "3",
        "CommunityOwnedDate": "2013-11-26T13:29:23.740",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "18841",
        "PostTypeId": "2",
        "ParentId": "18754",
        "CreationDate": "2008-08-20T21:05:03.713",
        "Score": "69",
        "Body": "<p>Use <a href=\"https://github.com/jgm/pandoc\" rel=\"noreferrer\">pandoc</a> \u2014 it's a commandline tool that lets you convert from one format to another. This tool supports Markdown to HTML and back.</p>\n\n<p>E.g. to generate HTML from Markdown, run:</p>\n\n<pre><code>pandoc -f markdown index.md &gt; index.html\n</code></pre>\n",
        "OwnerDisplayName": "Doe",
        "LastEditorUserId": "15168",
        "LastEditDate": "2017-05-21T01:29:30.740",
        "LastActivityDate": "2017-05-21T01:29:30.740",
        "CommentCount": "4",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "19290",
        "PostTypeId": "2",
        "ParentId": "19280",
        "CreationDate": "2008-08-21T03:31:16.097",
        "Score": "8",
        "Body": "<p>Javascript offers 3 modal boxes.  <code>prompt</code>, <code>confirm</code> and <code>alert</code>.  None of those satisfy your request.  </p>\n\n<p>There are a plethora of js modal popup solutions.  Here's an example.</p>\n\n<ul>\n<li><a href=\"https://github.com/okonet/modalbox\" rel=\"nofollow noreferrer\">ModalBox</a></li>\n</ul>\n",
        "OwnerUserId": "565",
        "OwnerDisplayName": "Cade",
        "LastEditorUserId": "3486675",
        "LastEditDate": "2019-11-20T10:19:09.163",
        "LastActivityDate": "2019-11-20T10:19:09.163",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "20533",
        "PostTypeId": "1",
        "AcceptedAnswerId": "20543",
        "CreationDate": "2008-08-21T17:03:25.487",
        "Score": "176",
        "ViewCount": "252095",
        "Body": "<p>I searched for this and found <a href=\"https://stackoverflow.com/users/1632/maudite\">Maudite's</a> question about <a href=\"https://stackoverflow.com/questions/14155/text-editors#14203\">text editors</a> but they were all for Windows.</p>\n\n<p>As you have no doubt guessed, I am trying to find out if there are any text/code editors for the Mac besides what I know of. I'll edit my post to include editors listed.</p>\n\n<h3>Free</h3>\n\n<ol>\n<li><a href=\"http://www.barebones.com/products/textwrangler/\" rel=\"noreferrer\">Textwrangler</a></li>\n<li><a href=\"https://developer.apple.com/xcode/\" rel=\"noreferrer\">Xcode</a></li>\n<li><a href=\"https://github.com/macvim-dev/macvim\" rel=\"noreferrer\">Mac Vim</a></li>\n<li><a href=\"http://aquamacs.org/\" rel=\"noreferrer\">Aquamacs</a> and closer to the original <a href=\"http://homepage.mac.com/zenitani/emacs-e.html\" rel=\"noreferrer\">EMacs</a></li>\n<li><a href=\"http://www.jedit.org/\" rel=\"noreferrer\">JEdit</a></li>\n<li><a href=\"http://editra.org/\" rel=\"noreferrer\">Editra</a></li>\n<li><a href=\"https://www.eclipse.org/\" rel=\"noreferrer\">Eclipse</a></li>\n<li><a href=\"https://netbeans.org/kb/articles/mac.html\" rel=\"noreferrer\">NetBeans</a></li>\n<li><a href=\"http://kodapp.com/\" rel=\"noreferrer\">Kod</a></li>\n<li><a href=\"https://github.com/textmate/textmate#readme\" rel=\"noreferrer\">TextMate2</a> - GPL</li>\n<li><a href=\"http://brackets.io/\" rel=\"noreferrer\">Brackets</a></li>\n<li><a href=\"https://atom.io/\" rel=\"noreferrer\">Atom.io</a></li>\n</ol>\n\n<h3>Commercial</h3>\n\n<ol>\n<li><a href=\"https://macromates.com/\" rel=\"noreferrer\">Textmate</a></li>\n<li><a href=\"http://www.barebones.com/products/bbedit/\" rel=\"noreferrer\">BBEdit</a></li>\n<li><a href=\"http://www.codingmonkeys.de/subethaedit/\" rel=\"noreferrer\">SubEthaEdit</a></li>\n<li><a href=\"http://www.panic.com/coda/\" rel=\"noreferrer\">Coda</a></li>\n<li><a href=\"http://www.sublimetext.com/2\" rel=\"noreferrer\">Sublime Text 2</a></li>\n<li><a href=\"http://smultron.sourceforge.net/\" rel=\"noreferrer\">Smultron</a></li>\n<li><a href=\"http://www.jetbrains.com/webstorm/\" rel=\"noreferrer\">WebStorm</a></li>\n<li><a href=\"http://osxpeppermint.com\" rel=\"noreferrer\">Peppermint</a></li>\n</ol>\n\n<h3>Articles related to the subject</h3>\n\n<ol>\n<li><a href=\"http://mac360.com/index.php/mac360/comments/faceoff_which_is_the_best_text_editor_ever/\" rel=\"noreferrer\">Faceoff, which is the best text editor ever?</a></li>\n<li><a href=\"http://maceditors.com\" rel=\"noreferrer\">Maceditors.com, mac editors features compared</a></li>\n</ol>\n\n<p>Thank you everybody that has added suggestions.</p>\n",
        "OwnerUserId": "1384652",
        "OwnerDisplayName": "Teifion",
        "LastEditorUserId": "1033581",
        "LastEditDate": "2019-06-07T04:45:34.640",
        "LastActivityDate": "2019-06-07T05:14:36.303",
        "Title": "List of macOS text editors and code editors",
        "Tags": "<macos><editor>",
        "AnswerCount": "39",
        "CommentCount": "5",
        "FavoriteCount": "0",
        "ClosedDate": "2012-04-02T19:34:54.743",
        "CommunityOwnedDate": "2009-01-22T15:17:34.413",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "21348",
        "PostTypeId": "2",
        "ParentId": "21288",
        "CreationDate": "2008-08-21T22:29:16.000",
        "Score": "353",
        "Body": "<p><strong>edit</strong> (not by the author): There is a comprehensive list of IoC frameworks available at <a href=\"https://github.com/quozd/awesome-dotnet/blob/master/README.md#ioc\" rel=\"nofollow noreferrer\">https://github.com/quozd/awesome-dotnet/blob/master/README.md#ioc</a>:</p>\n<ul>\n<li><a href=\"https://github.com/castleproject/Windsor\" rel=\"nofollow noreferrer\">Castle Windsor</a> - Castle Windsor is best of breed, mature Inversion of Control container available for .NET and Silverlight</li>\n<li><a href=\"https://github.com/unitycontainer/unity\" rel=\"nofollow noreferrer\">Unity</a> - Lightweight extensible dependency injection container with support for constructor, property, and method call injection</li>\n<li><a href=\"https://github.com/autofac/Autofac\" rel=\"nofollow noreferrer\">Autofac</a> - An addictive .NET IoC container</li>\n<li><a href=\"https://github.com/dadhi/DryIoc\" rel=\"nofollow noreferrer\">DryIoc</a> - Simple, fast all fully featured IoC container.</li>\n<li><a href=\"https://github.com/ninject/ninject\" rel=\"nofollow noreferrer\">Ninject</a> - The ninja of .NET dependency injectors</li>\n<li><a href=\"https://github.com/spring-projects/spring-net\" rel=\"nofollow noreferrer\">Spring.Net</a> - Spring.NET is an open source application framework that makes building  enterprise .NET applications easier</li>\n<li><a href=\"https://jasperfx.github.io/lamar/\" rel=\"nofollow noreferrer\">Lamar</a> - A fast IoC container heavily optimized for usage within ASP.NET Core and other .NET server side applications.</li>\n<li><a href=\"https://github.com/seesharper/LightInject\" rel=\"nofollow noreferrer\">LightInject</a> - A ultra lightweight IoC container</li>\n<li><a href=\"https://github.com/simpleinjector/SimpleInjector\" rel=\"nofollow noreferrer\">Simple Injector</a> - Simple Injector is an easy-to-use Dependency Injection (DI) library for .NET 4+ that supports Silverlight 4+, Windows Phone 8, Windows 8 including Universal apps and Mono.</li>\n<li><a href=\"https://github.com/aspnet/DependencyInjection\" rel=\"nofollow noreferrer\">Microsoft.Extensions.DependencyInjection</a> - The default IoC container for ASP.NET Core applications.</li>\n<li><a href=\"https://github.com/khellang/Scrutor\" rel=\"nofollow noreferrer\">Scrutor</a> - Assembly scanning extensions for Microsoft.Extensions.DependencyInjection.</li>\n<li><a href=\"https://github.com/Microsoft/vs-mef\" rel=\"nofollow noreferrer\">VS MEF</a> - Managed Extensibility Framework (MEF) implementation used by Visual Studio.</li>\n<li><a href=\"https://github.com/grumpydev/TinyIoC\" rel=\"nofollow noreferrer\">TinyIoC</a> - An easy to use, hassle free, Inversion of Control Container for small projects, libraries and beginners alike.</li>\n<li><a href=\"https://github.com/z4kn4fein/stashbox\" rel=\"nofollow noreferrer\">Stashbox</a> - A lightweight, fast and portable dependency injection framework for .NET based solutions.</li>\n</ul>\n<p>Original answer follows.</p>\n<hr />\n<p>I suppose I might be being a bit picky here but it's important to note that DI (Dependency Injection) is a programming pattern and is facilitated by, but does not require, an IoC (Inversion of Control) framework. IoC frameworks just make DI much easier and they provide a host of other benefits over and above DI.</p>\n<p>That being said, I'm sure that's what you were asking. About IoC Frameworks; I used to use <a href=\"http://www.springframework.net/\" rel=\"nofollow noreferrer\">Spring.Net</a> and <a href=\"https://github.com/castleproject/Windsor/blob/master/docs/README.md\" rel=\"nofollow noreferrer\">CastleWindsor</a> a lot, but the real pain in the behind was all that pesky XML config you had to write! They're pretty much all moving this way now, so I have been using <a href=\"http://structuremap.github.io/\" rel=\"nofollow noreferrer\">StructureMap</a> for the last year or so, and since it has moved to a fluent config using strongly typed generics and a registry, my pain barrier in using IoC has dropped to below zero! I get an absolute kick out of knowing now that my IoC config is checked at compile-time (for the most part) and I have had nothing but joy with StructureMap and its speed. I won't say that the others were slow at runtime, but they were more difficult for me to setup and frustration often won the day.</p>\n<p><strong>Update</strong></p>\n<p>I've been using <a href=\"http://ninject.org/\" rel=\"nofollow noreferrer\">Ninject</a> on my latest project and it has been an absolute pleasure to use. Words fail me a bit here, but (as we say in the UK) this framework is 'the Dogs'. I would highly recommend it for any green fields projects where you want to be up and running quickly. I got all I needed from a <a href=\"http://www.dimecasts.net/Casts/ByAuthor/Justin%20Etheredge\" rel=\"nofollow noreferrer\">fantastic set of Ninject screencasts</a> by Justin Etheredge. I can't see that retro-fitting Ninject into existing code being a problem at all, but then the same could be said of <a href=\"http://structuremap.github.io/\" rel=\"nofollow noreferrer\">StructureMap</a> in my experience. It'll be a tough choice going forward between those two, but I'd rather have competition than stagnation and there's a decent amount of healthy competition out there.</p>\n<p>Other IoC screencasts can also be found <a href=\"http://www.dimecasts.net/Casts/ByTag/IoC\" rel=\"nofollow noreferrer\">here on Dimecasts</a>.</p>\n",
        "OwnerUserId": "1107",
        "OwnerDisplayName": "Rob G",
        "LastEditorUserId": "8700582",
        "LastEditorDisplayName": "Rob G",
        "LastEditDate": "2021-12-06T07:49:11.283",
        "LastActivityDate": "2021-12-06T07:49:11.283",
        "CommentCount": "7",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "22133",
        "PostTypeId": "2",
        "ParentId": "22115",
        "CreationDate": "2008-08-22T11:54:06.270",
        "Score": "56",
        "Body": "<p><strong>Edit:</strong></p>\n<p>Complete list of suggested libraries on this question:</p>\n<ol>\n<li><a href=\"https://code.google.com/archive/p/xeger/\" rel=\"noreferrer\">Xeger</a>* - Java</li>\n<li><a href=\"https://github.com/mifmif/Generex\" rel=\"noreferrer\">Generex</a>* - Java</li>\n<li><a href=\"https://github.com/curious-odd-man/RgxGen\" rel=\"noreferrer\">Rgxgen</a> - Java</li>\n<li><a href=\"https://github.com/GoranSiska/rxrdg\" rel=\"noreferrer\">rxrdg</a> - C#</li>\n</ol>\n<p>* - Depends on <code>dk.brics.automaton</code></p>\n<p><strong>Edit:</strong>\nAs mentioned in the comments, there is a library available at Google Code to achieve this:\n<a href=\"https://code.google.com/archive/p/xeger/\" rel=\"noreferrer\">https://code.google.com/archive/p/xeger/</a></p>\n<p>See also <a href=\"https://github.com/mifmif/Generex\" rel=\"noreferrer\">https://github.com/mifmif/Generex</a> as suggested by <a href=\"https://stackoverflow.com/a/24659605/1820\">Mifmif</a></p>\n<p><strong>Original message:</strong></p>\n<p>Firstly, with a complex enough regexp, I believe this can be impossible. But you should be able to put something together for simple regexps.</p>\n<p>If you take a look at the source code of the class java.util.regex.Pattern, you'll see that it uses an internal representation of Node instances. Each of the different pattern components have their own implementation of a Node subclass. These Nodes are organised into a tree.</p>\n<p>By producing a visitor that traverses this tree, you should be able to call an overloaded generator method or some kind of Builder that cobbles something together.</p>\n",
        "OwnerUserId": "1820",
        "OwnerDisplayName": "Cheekysoft",
        "LastEditorUserId": "4174003",
        "LastEditDate": "2020-09-14T13:49:41.150",
        "LastActivityDate": "2020-09-14T13:49:41.150",
        "CommentCount": "4",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "22437",
        "PostTypeId": "2",
        "ParentId": "22429",
        "CreationDate": "2008-08-22T14:07:13.220",
        "Score": "1",
        "Body": "<p><a href=\"https://github.com/hmert/inline-search\" rel=\"nofollow noreferrer\">jQuery inline search plugin</a> provides this functionality</p>\n",
        "OwnerUserId": "648",
        "OwnerDisplayName": "RedWolves",
        "LastEditorUserId": "425076",
        "LastEditDate": "2012-09-18T12:42:16.467",
        "LastActivityDate": "2012-09-18T12:42:16.467",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "23048",
        "PostTypeId": "2",
        "ParentId": "22697",
        "CreationDate": "2008-08-22T18:02:30.267",
        "Score": "314",
        "Body": "<p>I've had good success using <a href=\"https://github.com/mockito/mockito\" rel=\"noreferrer\">Mockito</a>.</p>\n\n<p>When I tried learning about JMock and EasyMock, I found the learning curve to be a bit steep (though maybe that's just me).</p>\n\n<p>I like Mockito because of its simple and clean syntax that I was able to grasp pretty quickly. The minimal syntax is designed to support the common cases very well, although the few times I needed to do something more complicated I found what I wanted was supported and easy to grasp.</p>\n\n<p>Here's an (abridged) example from the Mockito homepage:</p>\n\n<pre><code>import static org.mockito.Mockito.*;\n\nList mockedList = mock(List.class);\nmockedList.clear();\nverify(mockedList).clear();\n</code></pre>\n\n<p>It doesn't get much simpler than that.</p>\n\n<p>The only major downside I can think of is that it won't mock static methods.</p>\n",
        "OwnerUserId": "1557",
        "OwnerDisplayName": "Brian Laframboise",
        "LastEditorUserId": "245988",
        "LastEditDate": "2015-02-13T02:33:44.123",
        "LastActivityDate": "2015-02-13T02:33:44.123",
        "CommentCount": "12",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "24119",
        "PostTypeId": "2",
        "ParentId": "24109",
        "CreationDate": "2008-08-23T10:06:09.157",
        "Score": "259",
        "Body": "<h2>Initially: confusion</h2>\n\n<p>When originally writing this answer, I had recently made the switch from Visual Studio (with years of experience) to Linux and the first thing I did was try to find a reasonable IDE. At the time this was impossible: no good IDE existed.</p>\n\n<h2>Epiphany: UNIX is an IDE. <em>All of it.</em><sup>1</sup></h2>\n\n<p>And then I realised that the IDE in Linux is the command line with its tools:</p>\n\n<ul>\n<li>First you set up your shell\n\n<ul>\n<li>Bash, in my case, but many people prefer</li>\n<li><a href=\"https://fishshell.com/\" rel=\"noreferrer\">fish</a> or</li>\n<li><a href=\"https://github.com/robbyrussell/oh-my-zsh\" rel=\"noreferrer\">(Oh My) Zsh</a>;</li>\n</ul></li>\n<li>and your editor; pick your poison \u2014 both are state of the art:\n\n<ul>\n<li><a href=\"https://neovim.io/\" rel=\"noreferrer\">Neovim</a><sup>2</sup> or</li>\n<li><a href=\"https://www.gnu.org/software/emacs/\" rel=\"noreferrer\">Emacs</a>.</li>\n</ul></li>\n</ul>\n\n<p>Depending on your needs, you will then have to install and configure several plugins to make the editor work nicely (that\u2019s the one annoying part). For example, most programmers on Vim will benefit from the <a href=\"https://valloric.github.io/YouCompleteMe/\" rel=\"noreferrer\">YouCompleteMe</a> plugin for smart autocompletion.</p>\n\n<p>Once that\u2019s done, the shell is your command interface to interact with the various tools \u2014 Debuggers (gdb), Profilers (gprof, valgrind), etc. You set up your project/build environment using <a href=\"https://www.gnu.org/software/make/\" rel=\"noreferrer\">Make</a>, <a href=\"https://bitbucket.org/snakemake/snakemake/wiki/Home\" rel=\"noreferrer\">CMake</a>, <a href=\"https://bitbucket.org/snakemake/snakemake/wiki/Home\" rel=\"noreferrer\">SnakeMake</a> or any of the various alternatives. And you manage your code with a version control system (most people use <a href=\"https://git-scm.com/\" rel=\"noreferrer\">Git</a>). You also use <a href=\"https://tmux.github.io/\" rel=\"noreferrer\">tmux</a> (previously also screen) to multiplex (= think multiple windows/tabs/panels) and persist your terminal session.</p>\n\n<p>The point is that, thanks to the shell and a few tool writing conventions, these all <em>integrate with each other</em>. And that way <strong>the Linux shell is a truly integrated development environment</strong>, completely on par with other modern IDEs. (This doesn\u2019t mean that individual IDEs don\u2019t have features that the command line may be lacking, but the inverse is also true.)</p>\n\n<h2>To each their own</h2>\n\n<p>I cannot overstate how well the above workflow functions once you\u2019ve gotten into the habit. But some people simply prefer graphical editors, and in the years since this answer was originally written, Linux has gained a suite of excellent graphical IDEs for several different programming languages (but not, as far as I\u2019m aware, for C++). Do give them a try even if\u00a0\u2014\u00a0like me\u00a0\u2014\u00a0you end up not using them. Here\u2019s just a small and biased selection:</p>\n\n<ul>\n<li>For Python development, there\u2019s <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noreferrer\">PyCharm</a></li>\n<li>For R, there\u2019s <a href=\"https://www.rstudio.com/\" rel=\"noreferrer\">RStudio</a></li>\n<li>For JavaScript and TypeScript, there\u2019s <a href=\"https://code.visualstudio.com/\" rel=\"noreferrer\">Visual Studio Code</a> (which is also a good all-round editor)</li>\n<li>And finally, many people love the <a href=\"https://www.sublimetext.com/\" rel=\"noreferrer\">Sublime Text editor</a> for general code editing.</li>\n</ul>\n\n<p>Keep in mind that this list is far from complete.</p>\n\n<hr>\n\n<p><sup>1</sup> I stole that title from dsm\u2019s comment.</p>\n\n<p><sup>2</sup> I used to refer to Vim here. And while plain Vim is still more than capable, Neovim is a promising restart, and it\u2019s modernised a few old warts.</p>\n",
        "OwnerUserId": "1968",
        "OwnerDisplayName": "Konrad Rudolph",
        "LastEditorUserId": "1968",
        "LastEditDate": "2016-11-02T14:49:19.650",
        "LastActivityDate": "2016-11-02T14:49:19.650",
        "CommentCount": "48",
        "CommunityOwnedDate": "2009-11-09T02:35:05.673",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "24583",
        "PostTypeId": "2",
        "ParentId": "24580",
        "CreationDate": "2008-08-23T20:44:58.030",
        "Score": "4",
        "Body": "<p>Simplest way: navigate to the directory containing the solution or project file, and run <code>msbuild</code> (assuming you have Visual Studio 2005 or newer).</p>\n\n<p>More flexible ways:</p>\n\n<ul>\n<li>Read up on <a href=\"http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx\" rel=\"nofollow noreferrer\">the MSBuild\nreference</a>. There are tons of\ncustomization, especially once\nyou've installed the <a href=\"https://github.com/loresoft/msbuildtasks\" rel=\"nofollow noreferrer\">MSBuild Community Tasks Project</a>.  </li>\n<li>Use <a href=\"http://en.wikipedia.org/wiki/NAnt\" rel=\"nofollow noreferrer\">NAnt</a>. It has existed\nfor longer than MSBuild and has more\ncommunity support, but requires you\nto start a project file from\nscratch, rather than extending the\nexisting, Visual Studio-created one.</li>\n</ul>\n",
        "OwnerUserId": "1600",
        "OwnerDisplayName": "Soeren Kuklau",
        "LastEditorUserId": "63550",
        "LastEditDate": "2013-05-13T11:32:43.360",
        "LastActivityDate": "2013-05-13T11:32:43.360",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "24919",
        "PostTypeId": "2",
        "ParentId": "21651",
        "CreationDate": "2008-08-24T08:11:29.673",
        "Score": "7",
        "Body": "<p>You can find a <a href=\"http://www.JSON.org/js.html\" rel=\"noreferrer\">JSON parser written in JavaScript here</a> (<a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" rel=\"noreferrer\">source code here</a>). You can also use the as3corelib JSON parser from JavaScript, there's <a href=\"http://help.adobe.com/en_US/AIR/1.1/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7ed9.html\" rel=\"noreferrer\">a description of how to access ActionScript libraries from JavaScript here</a>.</p>\n",
        "OwnerUserId": "1109",
        "OwnerDisplayName": "Theo",
        "LastActivityDate": "2008-08-24T08:11:29.673",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 2.5"
    },
    {
        "Id": "25549",
        "PostTypeId": "2",
        "ParentId": "15187",
        "CreationDate": "2008-08-25T01:48:56.870",
        "Score": "14",
        "Body": "<p><a href=\"http://www.emacswiki.org/cgi-bin/emacs-en?CategoryExtensionLanguage\" rel=\"nofollow noreferrer\">http://www.emacswiki.org/cgi-bin/emacs-en?CategoryExtensionLanguage</a> is a list of all non-Elisp extension languages you can use.</p>\n\n<p>It does appear to be dynamic language centric.</p>\n\n<p><a href=\"http://common-lisp.net/project/slime/\" rel=\"nofollow noreferrer\">http://common-lisp.net/project/slime/</a> is missing from that list, as it is not quite an extension language, but an Elisp-Common Lisp bridge.  Its source code would show how to communicate back and forth over sockets.</p>\n\n<p>A similar IDE for Erlang is Distel, at <a href=\"http://fresh.homeunix.net/~luke/distel/\" rel=\"nofollow noreferrer\">http://fresh.homeunix.net/~luke/distel/</a> (currently down) and <a href=\"https://github.com/massemanet/distel\" rel=\"nofollow noreferrer\">https://github.com/massemanet/distel</a>.</p>\n\n<p>Good luck!</p>\n",
        "OwnerUserId": "2667",
        "OwnerDisplayName": "anonfunc",
        "LastEditorUserId": "247623",
        "LastEditorDisplayName": "anonfunc",
        "LastEditDate": "2015-02-21T05:03:45.780",
        "LastActivityDate": "2015-02-21T05:03:45.780",
        "CommentCount": "1",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "25583",
        "PostTypeId": "2",
        "ParentId": "25552",
        "CreationDate": "2008-08-25T02:36:04.963",
        "Score": "42",
        "Body": "<p>I think the best method out there is to implement the <a href=\"https://github.com/hyperic/sigar\" rel=\"nofollow noreferrer\">SIGAR API by Hyperic</a>.  It works for most of the major operating systems ( darn near anything modern ) and is very easy to work with.  The developer(s) are very responsive on their forum and mailing lists.  I also like that it is <strike>GPL2</strike> <a href=\"https://github.com/hyperic/sigar/blob/master/LICENSE\" rel=\"nofollow noreferrer\">Apache licensed</a>.  They provide a ton of examples in Java too!</p>\n\n<p><a href=\"https://github.com/hyperic/sigar\" rel=\"nofollow noreferrer\">SIGAR == System Information, Gathering And Reporting tool.</a></p>\n",
        "OwnerUserId": "828",
        "OwnerDisplayName": "MDC",
        "LastEditorUserId": "77887",
        "LastEditDate": "2017-09-27T19:24:20.887",
        "LastActivityDate": "2017-09-27T19:24:20.887",
        "CommentCount": "9",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "25689",
        "PostTypeId": "2",
        "ParentId": "25665",
        "CreationDate": "2008-08-25T05:21:22.927",
        "Score": "159",
        "Body": "<p>Try <a href=\"http://www.unixuser.org/~euske/python/pdfminer/index.html\" rel=\"noreferrer\">PDFMiner</a>. It can extract text from PDF files as HTML, SGML or \"Tagged PDF\" format.</p>\n\n<p>The Tagged PDF format seems to be the cleanest, and stripping out the XML tags leaves just the bare text.</p>\n\n<p>A Python 3 version is available under:</p>\n\n<ul>\n<li><a href=\"https://github.com/pdfminer/pdfminer.six\" rel=\"noreferrer\">https://github.com/pdfminer/pdfminer.six</a></li>\n</ul>\n",
        "OwnerUserId": "2783",
        "OwnerDisplayName": "David",
        "LastEditorUserId": "7385033",
        "LastEditDate": "2019-06-01T03:12:27.833",
        "LastActivityDate": "2019-06-01T03:12:27.833",
        "CommentCount": "7",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "27343",
        "PostTypeId": "2",
        "ParentId": "18985",
        "CreationDate": "2008-08-26T03:22:40.553",
        "Score": "72",
        "Body": "<p>First, pick your favorite Javascript based Pretty Print/Beautifier.  I prefer the one at <a href=\"http://jsbeautifier.org/\" rel=\"noreferrer\"><a href=\"http://jsbeautifier.org/\" rel=\"noreferrer\">http://jsbeautifier.org/</a></a>, because it's what I found first.  Downloads its file <a href=\"https://github.com/beautify-web/js-beautify/blob/master/js/lib/beautify.js\" rel=\"noreferrer\">https://github.com/beautify-web/js-beautify/blob/master/js/lib/beautify.js</a></p>\n\n<p>Second, download and install The Mozilla group's Java based Javascript engine, <a href=\"https://www.mozilla.org/rhino/\" rel=\"noreferrer\">Rhino</a>.  \"Install\" is a little bit misleading;  Download the zip file, extract everything, place js.jar in your Java classpath (or Library/Java/Extensions on OS X).  You can then run scripts with an invocation similar to this </p>\n\n<pre><code>java -cp js.jar org.mozilla.javascript.tools.shell.Main name-of-script.js\n</code></pre>\n\n<p>Use the Pretty Print/Beautifier from step 1 to write a small shell script that will read in your javascript file and run it through the Pretty Print/Beautifier from step one.  For example</p>\n\n<pre><code>//original code    \n(function() { ... js_beautify code ... }());\n\n//new code\nprint(global.js_beautify(readFile(arguments[0])));\n</code></pre>\n\n<p>Rhino gives javascript a few extra useful functions that don't necessarily make sense in a browser context, but do in a console context. The function print does what you'd expect, and prints out a string.  The function readFile accepts a file path string as an argument and returns the contents of that file.   </p>\n\n<p>You'd invoke the above something like </p>\n\n<pre><code>java -cp js.jar org.mozilla.javascript.tools.shell.Main beautify.js file-to-pp.js\n</code></pre>\n\n<p>You can mix and match Java and Javascript in your Rhino run scripts, so if you know a little Java it shouldn't be too hard to get this running with text-streams as well.</p>\n",
        "OwnerUserId": "2838",
        "LastEditorUserId": "20772",
        "LastEditDate": "2017-01-16T00:57:58.007",
        "LastActivityDate": "2017-01-16T00:57:58.007",
        "CommentCount": "9",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "28954",
        "PostTypeId": "2",
        "ParentId": "28932",
        "CreationDate": "2008-08-26T19:48:34.927",
        "Score": "126",
        "Body": "<p>Revisiting this question a few years later, <a href=\"http://github.com/mishoo/UglifyJS\" rel=\"nofollow noreferrer\">UglifyJS</a>, seems to be the best option as of now.</p>\n\n<p>As stated below, it runs on the NodeJS platform, but can be easily modified to run on any JavaScript engine.</p>\n\n<p>--- Old answer below---</p>\n\n<p>Google released <a href=\"https://github.com/google/closure-compiler\" rel=\"nofollow noreferrer\"><strong>Closure Compiler</strong></a> which seems to be generating the smallest files so far as seen <a href=\"http://blog.feedly.com/2009/11/06/google-closure-vs-yui-min/\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://news.ycombinator.com/item?id=924426\" rel=\"nofollow noreferrer\">here</a></p>\n\n<p>Previous to that the various options <a href=\"http://www.julienlecomte.net/blog/2007/08/13/\" rel=\"nofollow noreferrer\"> were as follow </a></p>\n\n<p>Basically <a href=\"http://dean.edwards.name/packer/\" rel=\"nofollow noreferrer\">Packer</a> does a better job at initial compression , but if you are going to gzip the files before sending on the wire (which you should be doing) <a href=\"http://www.julienlecomte.net/yuicompressor/\" rel=\"nofollow noreferrer\">YUI Compressor</a> gets the smallest final size.</p>\n\n<p>The tests were done on jQuery code btw.</p>\n\n<ul>\n<li>Original jQuery library 62,885 bytes , 19,758 bytes after gzip</li>\n<li>jQuery minified with JSMin 36,391 bytes , 11,541 bytes after gzip</li>\n<li>jQuery minified with Packer 21,557 bytes , 11,119 bytes after gzip</li>\n<li>jQuery minified with the YUI Compressor 31,822 bytes  , 10,818 bytes after gzip</li>\n</ul>\n\n<p>@<a href=\"https://stackoverflow.com/users/2434/daniel-james\">daniel james</a> mentions in the comment <a href=\"http://compressorrater.thruhere.net/\" rel=\"nofollow noreferrer\">compressorrater</a> which shows Packer  leading the chart in best compression, so I guess ymmv </p>\n",
        "OwnerUserId": "238",
        "OwnerDisplayName": "Pat",
        "LastEditorUserId": "-1",
        "LastEditorDisplayName": "Pat",
        "LastEditDate": "2017-05-23T11:46:22.797",
        "LastActivityDate": "2016-05-24T22:41:41.463",
        "CommentCount": "6",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "29068",
        "PostTypeId": "2",
        "ParentId": "27758",
        "CreationDate": "2008-08-26T22:10:52.493",
        "Score": "27",
        "Body": "<p><strong>Prior to VS2013</strong> you could use:</p>\n<p><code>[<a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.editorbrowsableattribute\" rel=\"nofollow noreferrer\">System.ComponentModel.EditorBrowsable</a>(<a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.editorbrowsablestate\" rel=\"nofollow noreferrer\">System.ComponentModel.EditorBrowsableState.Never</a>)]\n</code></p>\n<p>so that it doesn't show up in IntelliSense. If the consumer still wants to use it they can, but it won't be as discoverable.</p>\n<p><a href=\"https://stackoverflow.com/a/27825/3195477\">Keith's point</a> about over-engineering still stands though.</p>\n<hr />\n<p><strong>Since VS2013</strong> this feature has been removed. As noted in <a href=\"https://github.com/dotnet/roslyn/issues/37478\" rel=\"nofollow noreferrer\">https://github.com/dotnet/roslyn/issues/37478</a> this was &quot;by design&quot; and apparently will not be brought back.</p>\n",
        "OwnerUserId": "214",
        "OwnerDisplayName": "[ICR]",
        "LastEditorUserId": "3195477",
        "LastEditDate": "2022-03-24T12:27:05.513",
        "LastActivityDate": "2022-03-24T12:27:05.513",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "29770",
        "PostTypeId": "2",
        "ParentId": "28796",
        "CreationDate": "2008-08-27T09:15:42.863",
        "Score": "58",
        "Body": "<p>In the meantime, I've tried it two tools that have some sort of integration with vim.</p>\n\n<p>The first is <a href=\"https://github.com/python-rope/rope\" rel=\"noreferrer\">Rope</a>, a python refactoring library that comes with a Vim (and emacs) plug-in.  I tried it for a few renames, and that definitely worked as expected.  It allowed me to preview the refactoring as a diff, which is nice.  It is a bit text-driven, but that's alright for me, just takes longer to learn.</p>\n\n<p>The second is <a href=\"http://bicyclerepair.sourceforge.net/\" rel=\"noreferrer\">Bicycle Repair Man</a> which I guess wins points on name.  Also plugs into vim and emacs.  Haven't played much with it yet, but I remember trying it a long time ago.</p>\n\n<p>Haven't played with both enough yet, or tried more types of refactoring, but I will do some more hacking with them.</p>\n",
        "OwnerUserId": "2900",
        "OwnerDisplayName": "Thomas Vander Stichele",
        "LastEditorUserId": "1442517",
        "LastEditDate": "2017-07-08T08:26:29.467",
        "LastActivityDate": "2017-07-08T08:26:29.467",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "29835",
        "PostTypeId": "2",
        "ParentId": "7364",
        "CreationDate": "2008-08-27T09:59:34.070",
        "Score": "20",
        "Body": "<p>If you need really simple PDFs, then Zend or <a href=\"http://www.fpdf.org/\" rel=\"noreferrer\">FPDF</a> is fine. However I find them difficult and frustrating to work with. Also, because of the way the API works, there's no good way to separate content from presentation from business logic.</p>\n\n<p>For that reason, I use <a href=\"https://github.com/dompdf/dompdf\" rel=\"noreferrer\">dompdf</a>, which automatically converts HTML and CSS to PDF documents. You can lay out a template just as you would for an HTML page and use standard HTML syntax. You can even include an external CSS file. The library isn't perfect and very complex markup or css sometimes gets mangled, but I haven't found anything else that works as well.</p>\n",
        "OwnerUserId": "1103",
        "OwnerDisplayName": "AdamTheHutt",
        "LastEditorUserId": "92315",
        "LastEditDate": "2012-12-07T22:51:30.430",
        "LastActivityDate": "2012-12-07T22:51:30.430",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "31372",
        "PostTypeId": "2",
        "ParentId": "31340",
        "CreationDate": "2008-08-28T00:00:18.167",
        "Score": "36",
        "Body": "<p>Python's a fairly easy language to thread in, but there are caveats.  The biggest thing you need to know about is the Global Interpreter Lock.  This allows only one thread to access the interpreter.  This means two things:  1)  you rarely ever find yourself using a lock statement in python and 2) if you want to take advantage of multi-processor systems, you have to use separate processes.  EDIT:  I should also point out that you can put some of the code in C/C++ if you want to get around the GIL as well.</p>\n\n<p>Thus, you need to re-consider why you want to use threads.  If you want to parallelize your app to take advantage of dual-core architecture, you need to consider breaking your app up into multiple processes.</p>\n\n<p>If you want to improve responsiveness, you should CONSIDER using threads.  There are other alternatives though, namely <a href=\"http://en.wikipedia.org/wiki/Microthread\" rel=\"noreferrer\">microthreading</a>.  There are also some frameworks that you should look into:</p>\n\n<ul>\n<li><a href=\"http://www.stackless.com/\" rel=\"noreferrer\">stackless python</a></li>\n<li><a href=\"http://greenlet.readthedocs.org/en/latest/\" rel=\"noreferrer\">greenlets</a></li>\n<li><a href=\"http://www.gevent.org/\" rel=\"noreferrer\">gevent</a></li>\n<li><a href=\"https://github.com/saucelabs/monocle\" rel=\"noreferrer\">monocle</a></li>\n</ul>\n",
        "OwnerUserId": "2147",
        "OwnerDisplayName": "Jason Baker",
        "LastEditorUserId": "2147",
        "LastEditorDisplayName": "Jason Baker",
        "LastEditDate": "2013-06-27T20:25:13.057",
        "LastActivityDate": "2013-06-27T20:25:13.057",
        "CommentCount": "3",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "32857",
        "PostTypeId": "2",
        "ParentId": "32044",
        "CreationDate": "2008-08-28T17:23:22.073",
        "Score": "20",
        "Body": "<p>this might be way more than you need, but there is a django module called 'mptt' - this stores a hierarchical tree structure in an sql database, and includes templates for display in the view code.  you might be able to find something useful there.</p>\n\n<p>here's the link : <a href=\"https://github.com/django-mptt/django-mptt/\" rel=\"noreferrer\">django-mptt</a></p>\n",
        "OwnerDisplayName": "mark streatfield",
        "LastEditorUserId": "1011749",
        "LastEditDate": "2013-07-12T21:52:12.500",
        "LastActivityDate": "2013-07-12T21:52:12.500",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "32939",
        "PostTypeId": "2",
        "ParentId": "32899",
        "CreationDate": "2008-08-28T18:02:33.027",
        "Score": "271",
        "Body": "<p>This is called &quot;parametrization&quot;.</p>\n<p>There are several tools that support this approach. E.g.:</p>\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/parametrize.html\" rel=\"noreferrer\">pytest's decorator</a></li>\n<li><a href=\"https://github.com/wolever/parameterized\" rel=\"noreferrer\">parameterized</a></li>\n</ul>\n<p>The resulting code looks like this:</p>\n<pre><code>from parameterized import parameterized\n\nclass TestSequence(unittest.TestCase):\n    @parameterized.expand([\n        [&quot;foo&quot;, &quot;a&quot;, &quot;a&quot;,],\n        [&quot;bar&quot;, &quot;a&quot;, &quot;b&quot;],\n        [&quot;lee&quot;, &quot;b&quot;, &quot;b&quot;],\n    ])\n    def test_sequence(self, name, a, b):\n        self.assertEqual(a,b)\n</code></pre>\n<p>Which will generate the tests:</p>\n<pre class=\"lang-none prettyprint-override\"><code>test_sequence_0_foo (__main__.TestSequence) ... ok\ntest_sequence_1_bar (__main__.TestSequence) ... FAIL\ntest_sequence_2_lee (__main__.TestSequence) ... ok\n\n======================================================================\nFAIL: test_sequence_1_bar (__main__.TestSequence)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/usr/local/lib/python2.7/site-packages/parameterized/parameterized.py&quot;, line 233, in &lt;lambda&gt;\n    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)\n  File &quot;x.py&quot;, line 12, in test_sequence\n    self.assertEqual(a,b)\nAssertionError: 'a' != 'b'\n</code></pre>\n<p>For historical reasons I'll leave the original answer circa 2008):</p>\n<p>I use something like this:</p>\n<pre><code>import unittest\n\nl = [[&quot;foo&quot;, &quot;a&quot;, &quot;a&quot;,], [&quot;bar&quot;, &quot;a&quot;, &quot;b&quot;], [&quot;lee&quot;, &quot;b&quot;, &quot;b&quot;]]\n\nclass TestSequense(unittest.TestCase):\n    pass\n\ndef test_generator(a, b):\n    def test(self):\n        self.assertEqual(a,b)\n    return test\n\nif __name__ == '__main__':\n    for t in l:\n        test_name = 'test_%s' % t[0]\n        test = test_generator(t[1], t[2])\n        setattr(TestSequense, test_name, test)\n    unittest.main()\n</code></pre>\n",
        "OwnerUserId": "3448",
        "OwnerDisplayName": "mojo",
        "LastEditorUserId": "63550",
        "LastEditDate": "2021-02-05T16:18:38.200",
        "LastActivityDate": "2021-02-05T16:18:38.200",
        "CommentCount": "15",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "33916",
        "PostTypeId": "2",
        "ParentId": "33901",
        "CreationDate": "2008-08-29T03:33:26.103",
        "Score": "50",
        "Body": "<p>I had limited success with <a href=\"https://github.com/ical4j/ical4j\" rel=\"noreferrer\">iCal4j</a> (<a href=\"http://ical4j.sourceforge.net/introduction.html\" rel=\"noreferrer\">intro</a>) on a project last year.</p>\n\n<p>It seems to be a fairly popular choice for ical work in the java community. </p>\n\n<p>If I remember correctly the API can be slightly confusing at first glance.\nHowever It's pretty solid in the long run.</p>\n\n<p>Good luck, \nBrian </p>\n",
        "OwnerUserId": "3415",
        "OwnerDisplayName": "Brian Gianforcaro",
        "LastEditorUserId": "1363613",
        "LastEditDate": "2015-11-16T03:11:06.677",
        "LastActivityDate": "2015-11-16T03:11:06.677",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "34267",
        "PostTypeId": "2",
        "ParentId": "34120",
        "CreationDate": "2008-08-29T09:40:59.540",
        "Score": "5",
        "Body": "<p>I had some fun working with <a href=\"https://github.com/hxseven/htmlSQL\" rel=\"nofollow noreferrer\">htmlSQL</a>, which is not so much a high end solution, but really simple to work with.</p>\n",
        "OwnerUserId": "999",
        "OwnerDisplayName": "BlaM",
        "LastEditorUserId": "999",
        "LastEditDate": "2014-01-24T12:45:30.957",
        "LastActivityDate": "2014-01-24T12:45:30.957",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "35896",
        "PostTypeId": "1",
        "AcceptedAnswerId": "36050",
        "CreationDate": "2008-08-30T11:33:55.787",
        "Score": "19",
        "ViewCount": "10396",
        "Body": "<p>Is there a portable, not patent-restricted way to play compressed sound files in C# / .Net? I want to play short \"jingle\" sounds on various events occuring in the program.</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/system.media.soundplayer.aspx\" rel=\"noreferrer\">System.Media.SoundPlayer</a> can handle only WAV, but those are typically to big to embed in a downloadable apllication. MP3 is protected with patents, so even if there was a fully managed decoder/player it wouldn't be free to redistribute. The best format available would seem to be OGG Vorbis, but I had no luck getting any C# Vorbis libraries to work (I managed to extract a raw PCM with <a href=\"https://github.com/mono/csvorbis\" rel=\"noreferrer\">csvorbis</a> but I don't know how to play it afterwards).</p>\n\n<p>I neither want to distribute any binaries with my application nor depend on P/Invoke, as the project should run at least on Windows and Linux. I'm fine with bundling .Net assemblies as long as they are license-compatible with GPL.</p>\n\n<p>[this question is a follow up to a <a href=\"http://lists.ximian.com/pipermail/mono-devel-list/2007-June/023863.html\" rel=\"noreferrer\">mailing list discussion on mono-dev</a> mailing list a year ago]</p>\n",
        "OwnerUserId": "3205",
        "OwnerDisplayName": "skolima",
        "LastEditorUserId": "3205",
        "LastEditorDisplayName": "skolima",
        "LastEditDate": "2011-08-02T10:32:52.520",
        "LastActivityDate": "2012-10-08T21:23:54.097",
        "Title": "How can I play compressed sound files in C# in a portable way?",
        "Tags": "<c#><.net><mono><audio><oggvorbis>",
        "AnswerCount": "9",
        "CommentCount": "0",
        "FavoriteCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "35963",
        "PostTypeId": "2",
        "ParentId": "3150",
        "CreationDate": "2008-08-30T13:51:31.510",
        "Score": "57",
        "Body": "<p><a href=\"http://gamesfromwithin.com/exploring-the-c-unit-testing-framework-jungle\" rel=\"nofollow noreferrer\">This page</a> may help, it reviews quite a few C++ unit test frameworks:</p>\n\n<ul>\n<li>CppUnit  </li>\n<li>Boost.Test</li>\n<li>CppUnitLite </li>\n<li>NanoCppUnit</li>\n<li>Unit++</li>\n<li>CxxTest</li>\n</ul>\n\n<p>Check out <strong><em><a href=\"http://www.objectmentor.com/resources/downloads.html\" rel=\"nofollow noreferrer\">CPPUnitLite</a></em></strong> or <strong><em><a href=\"http://gamesfromwithin.com/?p=48\" rel=\"nofollow noreferrer\">CPPUnitLite2</a></em></strong>. </p>\n\n<p><em>CPPUnitLite</em> was created by Michael Feathers, who originally ported Java's JUnit to C++ as CPPUnit (CPPUnit tries mimic the development model of JUnit - but C++ lacks Java's features [e.g. reflection] to make it easy to use). </p>\n\n<p>CPPUnitLite attempts to make a true C++-style testing framework, not a Java one ported to C++. (I'm paraphrasing from Feather's <a href=\"https://rads.stackoverflow.com/amzn/click/com/0131177052\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Working Effectively with Legacy Code</a> book). <em>CPPUnitLite2</em> seems to be another rewrite, with more features and bug fixes.</p>\n\n<p>I also just stumbled across <strong><em><a href=\"http://sourceforge.net/projects/unittest-cpp/\" rel=\"nofollow noreferrer\">UnitTest++</a></em></strong> which includes stuff from CPPUnitLite2 and some other framework.</p>\n\n<p>Microsoft has released <strong><em><a href=\"http://winunit.codeplex.com/\" rel=\"nofollow noreferrer\">WinUnit</a></em></strong>. </p>\n\n<p>Also checkout <strong><em><a href=\"https://github.com/philsquared/Catch\" rel=\"nofollow noreferrer\">Catch</a></em></strong> or <strong><em><a href=\"https://github.com/onqtam/doctest\" rel=\"nofollow noreferrer\">Doctest</a></em></strong></p>\n",
        "OwnerUserId": "3655",
        "LastEditorUserId": "3655",
        "LastEditorDisplayName": "Aardvark",
        "LastEditDate": "2016-10-17T18:24:53.410",
        "LastActivityDate": "2016-10-17T18:24:53.410",
        "CommentCount": "3",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "36978",
        "PostTypeId": "2",
        "ParentId": "36953",
        "CreationDate": "2008-08-31T17:14:06.990",
        "Score": "5",
        "Body": "<p>Have a look at the standard module <a href=\"http://docs.python.org/lib/module-shlex.html\" rel=\"nofollow noreferrer\">shlex</a> and modify one copy of it to match the syntax you use for your shell, it is a good starting point</p>\n\n<p>If you want all the power of a complete solution for lexing/parsing, <a href=\"https://github.com/antlr/antlr4/blob/master/doc/python-target.md\" rel=\"nofollow noreferrer\">ANTLR</a> can generate python too.</p>\n",
        "OwnerUserId": "927",
        "OwnerDisplayName": "PW",
        "LastEditorUserId": "927",
        "LastEditDate": "2020-05-22T08:05:20.127",
        "LastActivityDate": "2020-05-22T08:05:20.127",
        "CommentCount": "1",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "38588",
        "PostTypeId": "2",
        "ParentId": "23970",
        "CreationDate": "2008-09-01T23:10:45.360",
        "Score": "21",
        "Body": "<p>You cannot marshal a Lambda or Proc. This is because both of them are considered closures, which means they close around the memory on which they were defined and can reference it. (In order to marshal them you'd have to Marshal all of the memory they could access at the time they were created.)</p>\n\n<p>As Gaius pointed out though, you can use <a href=\"https://github.com/seattlerb/ruby2ruby\" rel=\"nofollow noreferrer\">ruby2ruby</a> to get a hold of the string of the program. That is, you can marshal the string that represents the ruby code and then reevaluate it later. </p>\n",
        "OwnerUserId": "823",
        "OwnerDisplayName": "RyanTM",
        "LastEditorUserId": "823",
        "LastEditDate": "2015-02-16T20:53:31.730",
        "LastActivityDate": "2015-02-16T20:53:31.730",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "41241",
        "PostTypeId": "2",
        "ParentId": "41233",
        "CreationDate": "2008-09-03T06:17:50.007",
        "Score": "196",
        "Body": "<p>The <a href=\"http://www.sqlite.org/cvstrac/wiki?p=SqliteWrappers\" rel=\"noreferrer\">wiki</a> lists some more wrappers:</p>\n\n<ul>\n<li>Java wrapper (around a SWIG interface): <a href=\"http://tk-software.home.comcast.net/\" rel=\"noreferrer\">http://tk-software.home.comcast.net/</a></li>\n<li>A good tutorial to use JDBC driver for SQLite. (it works at least !) <a href=\"http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite\" rel=\"noreferrer\">http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite</a></li>\n<li>Cross-platform JDBC driver which uses embedded native SQLite libraries on Windows, Linux, OS X, and falls back to pure Java implementation on other OSes: <a href=\"https://github.com/xerial/sqlite-jdbc\" rel=\"noreferrer\">https://github.com/xerial/sqlite-jdbc</a> (formerly <a href=\"http://www.zentus.com/sqlitejdbc\" rel=\"noreferrer\">zentus</a>)</li>\n<li>Another Java - SWIG wrapper. It only works on Win32. <a href=\"http://rodolfo_3.tripod.com/index.html\" rel=\"noreferrer\">http://rodolfo_3.tripod.com/index.html</a></li>\n<li>sqlite-java-shell: 100% pure Java port of the sqlite3 commandline shell built with NestedVM. (This is not a JDBC driver).</li>\n<li>SQLite JDBC Driver for Mysaifu JVM: SQLite JDBC Driver for Mysaifu JVM and SQLite JNI Library for Windows (x86) and Linux (i386/PowerPC). </li>\n</ul>\n",
        "OwnerUserId": "720",
        "OwnerDisplayName": "Peter Hoffmann",
        "LastEditorUserId": "1418097",
        "LastEditDate": "2015-06-19T17:54:11.790",
        "LastActivityDate": "2015-06-19T17:54:11.790",
        "CommentCount": "9",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "43180",
        "PostTypeId": "1",
        "AcceptedAnswerId": "45684",
        "CreationDate": "2008-09-04T04:28:09.230",
        "Score": "609",
        "ViewCount": "124129",
        "Body": "<p>One thing I've always wanted to do is develop my very own operating system (not necessarily fancy like Linux or Windows, but better than a simple boot loader which I've already done).</p>\n<p>I'm having a hard time finding resources/guides that take you past writing a simple &quot;Hello World&quot; OS.</p>\n<p>I know lots of people will probably recommend I look at Linux or BSD; but the code base for systems like that is (presumably) so big that I wouldn't know where to start.</p>\n<p>Any suggestions?</p>\n<p>Update: To make it easier for people who land on this post through Google here are some OS development resources:</p>\n<ul>\n<li><p><a href=\"https://web.archive.org/web/20120506110242/http://osix.net/modules/article/?id=359\" rel=\"noreferrer\">Writing Your Own Operating System</a> (Thanks Adam)</p>\n</li>\n<li><p><a href=\"http://www.linuxfromscratch.org/\" rel=\"noreferrer\">Linux From Scratch</a> (Thanks John)</p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/SharpOS_(operating_system)\" rel=\"noreferrer\">SharpOS (C# Operating System)</a> (Thanks lomaxx)</p>\n</li>\n<li><p><a href=\"http://www.minix3.org/\" rel=\"noreferrer\">Minix3</a> and <a href=\"http://minix1.woodhull.com/mxdownld.html\" rel=\"noreferrer\">Minix2</a> (Thanks Mike)</p>\n</li>\n<li><p><a href=\"http://wiki.osdev.org/Main_Page\" rel=\"noreferrer\">OS Dev Wiki</a> and <a href=\"http://forum.osdev.org/\" rel=\"noreferrer\">Forums</a> (Thanks Steve)</p>\n</li>\n<li><p><a href=\"http://www.osdever.net/\" rel=\"noreferrer\">BonaFide</a> (Thanks Steve)</p>\n</li>\n<li><p><a href=\"http://osdever.net/bkerndev/Docs/intro.htm\" rel=\"noreferrer\">Bran</a> (Thanks Steve)</p>\n</li>\n<li><p><a href=\"http://www.jamesmolloy.co.uk/tutorial_html/index.html\" rel=\"noreferrer\">Roll your own toy UNIX-clone OS</a> (Thanks Steve)</p>\n</li>\n<li><p><a href=\"http://www.brokenthorn.com/Resources/OSDevIndex.html\" rel=\"noreferrer\">Broken Thorn OS Development Series</a></p>\n</li>\n</ul>\n<p>Other resources:</p>\n<p>I found a nice resource named <a href=\"http://mikeos.berlios.de/\" rel=\"noreferrer\">MikeOS</a>, &quot;MikeOS is a learning tool to demonstrate how simple OSes work. It uses 16-bit real mode for BIOS access, so that it doesn't need complex drivers&quot;</p>\n<p><em>Updated 11/14/08</em></p>\n<p>I found some resources at <a href=\"http://www.freebyte.com/operatingsystems/#osprojects\" rel=\"noreferrer\">Freebyte's Guide to...Free and non-free Operating Systems</a> that links to kits such as OSKit and ExOS library.  These seem super useful in getting started in OS development.</p>\n<p><em>Updated 2/23/09</em></p>\n<p><a href=\"https://stackoverflow.com/users/42019/ric-tokyo\">Ric Tokyo</a> recommended <a href=\"http://code.google.com/p/nanoos/\" rel=\"noreferrer\">nanoos</a> in this <a href=\"https://stackoverflow.com/questions/580308/making-an-os-in-c/580362#580362\">question</a>.  Nanoos is an OS written in C++.</p>\n<p><em>Updated 3/9/09</em></p>\n<p>Dinah provided some useful Stack Overflow discussion of aspiring OS developers: <a href=\"https://stackoverflow.com/questions/340674/roadblocks-in-creating-a-custom-operating-system\">Roadblocks in creating a custom operating system</a> discusses what pitfalls you might encounter while developing an OS\nand <a href=\"https://stackoverflow.com/questions/130065/os-development\">OS Development</a> is a more general discussion.</p>\n<p><em>Updated 7/9/09</em></p>\n<p>LB provided a link to the <a href=\"http://www.scs.stanford.edu/07au-cs140/pintos/pintos.html\" rel=\"noreferrer\">Pintos Project</a>, an education OS designed for students learning OS development.</p>\n<p><em>Updated 7/27/09 (Still going strong!)</em></p>\n<p>I stumbled upon an <a href=\"http://academicearth.org/courses/operating-systems-and-system-programming\" rel=\"noreferrer\">online OS course</a> from Berkley featuring 23 lectures.</p>\n<p><a href=\"http://tomos.sourceforge.net/\" rel=\"noreferrer\">TomOS</a> is a fork of <a href=\"http://mikeos.berlios.de/\" rel=\"noreferrer\">MikeOS</a> that includes a little memory manager and mouse support. As MikeOS, it is designed to be an educational project.  It is written in NASM assembler.</p>\n<p><em>Updated 8/4/09</em></p>\n<p>I found the <a href=\"http://www.cs.berkeley.edu/%7Ekubitron/courses/cs162-F08/\" rel=\"noreferrer\">slides and other materials</a> to go along with the online Berkeley lectures listed above.</p>\n<p><em>Updated 8/23/09</em></p>\n<p>All <a href=\"https://stackoverflow.com/questions/tagged/osdev\">questions tagged osdev</a> on stackoverflow</p>\n<p><a href=\"http://www.eecs.harvard.edu/syrah/os161/\" rel=\"noreferrer\">OS/161</a> is an academic OS written in c that runs on a simulated hardware.  This OS is similar in Nachos.  Thanks Novelocrat!</p>\n<p>tangurena recommends <a href=\"http://en.wikipedia.org/wiki/MicroC/OS-II\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/MicroC/OS-II</a>, an OS designed for embedded systems.  There is a <a href=\"https://rads.stackoverflow.com/amzn/click/com/1578201039\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">companion book</a> as well.</p>\n<p><a href=\"https://rads.stackoverflow.com/amzn/click/com/0672327201\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Linux Kernel Development</a> by Robert Love is suggested by Anders.  It is a &quot;widely acclaimed insider's look at the Linux kernel.&quot;</p>\n<p><em>Updated 9/18/2009</em></p>\n<p>Thanks Tim S. Van Haren for telling us about <a href=\"http://www.gocosmos.org/index.en.aspx\" rel=\"noreferrer\">Cosmos</a>, an OS written entirely in c#.</p>\n<p>tgiphil tells us about <a href=\"http://www.mosa-project.org/\" rel=\"noreferrer\">Managed Operating System Alliance (MOSA) Framework</a>, &quot;a set of tools, specifications and source code to foster development of managed operating systems based on the Common Intermediate Language.&quot;</p>\n<p><em>Update 9/24/2009</em></p>\n<p>Steve found a couple resources for development on windows using Visual Studio, check out <a href=\"http://www.brokenthorn.com/Resources/OSDevMSVC.html\" rel=\"noreferrer\">BrokenThorn's guide setup with VS 2005</a> or <a href=\"http://wiki.osdev.org/Visual%5FStudio\" rel=\"noreferrer\">OSDev's VS Section</a>.</p>\n<p><em>Updated 9/5/2012</em></p>\n<p>kerneltrap.org is no longer available.  The linux kernel v0.01 is available from <a href=\"http://www.kernel.org/pub/linux/kernel/Historic/linux-0.01.tar.gz\" rel=\"noreferrer\">kernel.org</a></p>\n<p><em>Updated 12/21/2012</em>\nA basic OS development <a href=\"http://nw08.american.edu/%7Emblack/teaching.html#OSPROJECT\" rel=\"noreferrer\">tutorial</a> designed to be a semester's project. It guides you through to build an OS with basic components. Very good start for beginners. Related <a href=\"http://nw08.american.edu/%7Emblack/papers/sigcse09.pdf\" rel=\"noreferrer\">paper</a>.  Thanks Srujan!</p>\n<p><em>Updated 11/15/2013</em></p>\n<p><a href=\"http://www.cs.bham.ac.uk/%7Eexr/lectures/opsys/10_11/lectures/os-dev.pdf\" rel=\"noreferrer\">Writing a Simple Operating System From Scratch</a>.  Thanks James Moore!</p>\n<p><em>Updated 12/8/2013</em></p>\n<p><a href=\"https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System\" rel=\"noreferrer\">How to make a computer operating system</a>  Thanks ddtoni!</p>\n<p><em>Updated 3/18/2014</em></p>\n<p><a href=\"https://github.com/klange/toaruos\" rel=\"noreferrer\">ToAruOS an OS built mostly from scratch, including GUI</a></p>\n<p><em>Updated Sept 12 2016</em></p>\n<p><a href=\"http://www.independent-software.com/writing-your-own-toy-operating-system/\" rel=\"noreferrer\">Writing your own Toy Operating System</a></p>\n<p><em>Updated Dec 10 2016</em></p>\n<p><a href=\"https://www.cs.bham.ac.uk/%7Eexr/lectures/opsys/10_11/lectures/os-dev.pdf\" rel=\"noreferrer\">Writing a Simple Operating System \u2014from Scratch</a> (thank you @Tyler C)</p>\n",
        "OwnerUserId": "4050",
        "OwnerDisplayName": "Giovanni Galbo",
        "LastEditorUserId": "6083675",
        "LastEditorDisplayName": "Giovanni Galbo",
        "LastEditDate": "2021-05-30T18:37:46.267",
        "LastActivityDate": "2021-05-30T18:37:46.267",
        "Title": "What are some resources for getting started in operating system development?",
        "Tags": "<operating-system><kernel><osdev>",
        "AnswerCount": "28",
        "CommentCount": "9",
        "FavoriteCount": "0",
        "ClosedDate": "2014-07-25T20:17:12.463",
        "CommunityOwnedDate": "2009-03-09T22:28:26.647",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "43913",
        "PostTypeId": "2",
        "ParentId": "43842",
        "CreationDate": "2008-09-04T14:45:43.177",
        "Score": "0",
        "Body": "<p>This isn't really the same, but you might want to look at something like <a href=\"https://github.com/samtingleff/jchronic\" rel=\"nofollow noreferrer\">JChronic</a>, which can do natural language processing on dates.  So, the input date could be something like \"tomorrow\", or \"two weeks from next tuesday\".  </p>\n\n<p>This may not help at all for your application, but then again, it might.</p>\n",
        "OwnerUserId": "4257",
        "OwnerDisplayName": "pkaeding",
        "LastEditorUserId": "1070874",
        "LastEditorDisplayName": "pkaeding",
        "LastEditDate": "2012-04-18T19:27:58.487",
        "LastActivityDate": "2012-04-18T19:27:58.487",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "44096",
        "PostTypeId": "2",
        "ParentId": "44048",
        "CreationDate": "2008-09-04T16:12:41.020",
        "Score": "28",
        "Body": "<p>I'm a big fan of <a href=\"https://github.com/fordmason/cronolog\" rel=\"nofollow noreferrer\">Cronolog</a>.  Just install and pipe your logs through it.  For daily log rotation, something like this would work:</p>\n\n<pre><code>ErrorLog  \"|/usr/bin/cronolog /path/to/logs/%Y-%m-%d/error.log\"\nCustomLog \"|/usr/bin/cronolog /path/to/logs/%Y-%m-%d/access.log\" combined\n</code></pre>\n\n<p>Pretty handy, and once installed, easier (in my experience) than logrotate.</p>\n",
        "OwnerUserId": "683",
        "OwnerDisplayName": "Brian",
        "LastEditorUserId": "19679",
        "LastEditDate": "2015-11-12T17:32:44.337",
        "LastActivityDate": "2015-11-12T17:32:44.337",
        "CommentCount": "1",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "45271",
        "PostTypeId": "2",
        "ParentId": "45264",
        "CreationDate": "2008-09-05T05:27:26.397",
        "Score": "17",
        "Body": "<p>A quick google search reveals <a href=\"https://github.com/justinlilly/django-gencal\" rel=\"noreferrer\">django-gencal</a>, which looks like exactly what you need.  It would also be worth looking at the snippets under the calendar tag on Django Snippets at <a href=\"http://www.djangosnippets.org/tags/calendar/\" rel=\"noreferrer\">http://www.djangosnippets.org/tags/calendar/</a>. </p>\n",
        "OwnerUserId": "1057",
        "OwnerDisplayName": "Harley",
        "LastEditorUserId": "1057",
        "LastEditDate": "2011-04-28T11:38:07.083",
        "LastActivityDate": "2011-04-28T11:38:07.083",
        "CommentCount": "4",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "45718",
        "PostTypeId": "2",
        "ParentId": "30686",
        "CreationDate": "2008-09-05T12:54:31.327",
        "Score": "16",
        "Body": "<p>I prefer to install the <a href=\"https://github.com/Pscx/Pscx\" rel=\"nofollow noreferrer\">PowerShell Community Extensions</a> and just use the Get-FileVersionInfo function that it provides.</p>\n<p>Like so:</p>\n<pre>Get-FileVersionInfo MyAssembly.dll</pre>\n<p>with output like:</p>\n<pre>\nProductVersion   FileVersion      FileName\n--------------   -----------      --------\n1.0.2907.18095   1.0.2907.18095   C:\\Path\\To\\MyAssembly.dll\n</pre>\n<p>I've used it against an entire directory of assemblies with great success.</p>\n",
        "OwnerUserId": "4570",
        "OwnerDisplayName": "David Mohundro",
        "LastEditorUserId": "1339787",
        "LastEditDate": "2020-08-21T14:04:16.283",
        "LastActivityDate": "2020-08-21T14:04:16.283",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "47084",
        "PostTypeId": "2",
        "ParentId": "47003",
        "CreationDate": "2008-09-05T23:33:26.020",
        "Score": "59",
        "Body": "<p>I'm working with C# and Postgres using <b>Npgsql2</b> component, and they work fast, I recommend you.</p>\n\n<p>You can download from <a href=\"https://github.com/npgsql/Npgsql/releases\" rel=\"noreferrer\">https://github.com/npgsql/Npgsql/releases</a></p>\n\n<p><b>Note:</b> If you want an application that works with any database you can use the <b>DbProviderFactory</b> class and make your queries using <b>IDbConnection</b>, <b>IDbCommand</b>, <b>IDataReader</b> and/or <b>IDbTransaction</b> interfaces.</p>\n",
        "OwnerUserId": "4463",
        "OwnerDisplayName": "jalcom",
        "LastEditorUserId": "3644960",
        "LastEditorDisplayName": "jalcom",
        "LastEditDate": "2016-01-18T09:27:53.510",
        "LastActivityDate": "2016-01-18T09:27:53.510",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "47266",
        "PostTypeId": "2",
        "ParentId": "47253",
        "CreationDate": "2008-09-06T05:32:39.557",
        "Score": "24",
        "Body": "<p>There shouldn't be any need to use FastCGI. There exists a <a href=\"https://github.com/hexdump42/isapi-wsgi\" rel=\"noreferrer\">ISAPI extension for WSGI</a>.</p>\n",
        "OwnerUserId": "3560",
        "OwnerDisplayName": "John Millikin",
        "LastEditorUserId": "24587",
        "LastEditDate": "2016-05-24T07:01:33.243",
        "LastActivityDate": "2016-05-24T07:01:33.243",
        "CommentCount": "2",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "48261",
        "PostTypeId": "2",
        "ParentId": "44145",
        "CreationDate": "2008-09-07T08:47:30.657",
        "Score": "13",
        "Body": "<p>FiveRuns have a gem named <a href=\"https://github.com/bpot/data_fabric\" rel=\"nofollow noreferrer\">DataFabric</a> that does application-level sharding and master/slave replication. It might be worth checking out.</p>\n",
        "OwnerUserId": "1450",
        "OwnerDisplayName": "John Topley",
        "LastEditorUserId": "221213",
        "LastEditDate": "2013-09-26T12:40:07.687",
        "LastActivityDate": "2013-09-26T12:40:07.687",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    },
    {
        "Id": "48389",
        "PostTypeId": "2",
        "ParentId": "48253",
        "CreationDate": "2008-09-07T12:39:17.680",
        "Score": "9",
        "Body": "<p>Check out <a href=\"https://github.com/pbiggar/phc\" rel=\"nofollow noreferrer\">phc: the PHP compiler</a></p>\n<p>If you just want to run it like a script, you may not need to compile it per se, but just run it via the command line.  <a href=\"http://www.php.net/features.commandline\" rel=\"nofollow noreferrer\">Read running PHP via the command line.</a></p>\n",
        "OwnerUserId": "497",
        "OwnerDisplayName": "Chris Bartow",
        "LastEditorUserId": "263803",
        "LastEditDate": "2020-07-14T12:07:31.193",
        "LastActivityDate": "2020-07-14T12:07:31.193",
        "CommentCount": "1",
        "ContentLicense": "CC BY-SA 4.0"
    },
    {
        "Id": "49203",
        "PostTypeId": "2",
        "ParentId": "12159",
        "CreationDate": "2008-09-08T05:34:05.417",
        "Score": "6",
        "Body": "<p>I like to write two or more test methods to execute on parallel threads, and each of them make calls into the object under test. I've been using Sleep() calls to coordinate the order of the calls from the different threads, but that's not really reliable. It's also a lot slower because you have to sleep long enough that the timing usually works.</p>\n\n<p>I found the <a href=\"http://www.cs.umd.edu/projects/PL/multithreadedtc/overview.html\" rel=\"nofollow noreferrer\">Multithreaded TC Java library</a> from the same group that wrote FindBugs. It lets you specify the order of events without using Sleep(), and it's reliable. I haven't tried it yet.</p>\n\n<p>The biggest limitation to this approach is that it only lets you test the scenarios you suspect will cause trouble. As others have said, you really need to isolate your multithreaded code into a small number of simple classes to have any hope of thoroughly testing them.</p>\n\n<p>Once you've carefully tested the scenarios you expect to cause trouble, an unscientific test that throws a bunch of simultaneous requests at the class for a while is a good way to look for unexpected trouble.</p>\n\n<p><strong>Update:</strong> I've played a bit with the Multithreaded TC Java library, and it works well. I've also ported some of its features to a .NET version I call <a href=\"https://github.com/donkirkby/donkirkby/tree/master/TickingTest\" rel=\"nofollow noreferrer\">TickingTest</a>.</p>\n",
        "OwnerUserId": "4794",
        "OwnerDisplayName": "Don Kirkby",
        "LastEditorUserId": "4794",
        "LastEditDate": "2017-02-22T20:24:49.610",
        "LastActivityDate": "2017-02-22T20:24:49.610",
        "CommentCount": "0",
        "ContentLicense": "CC BY-SA 3.0"
    }
]